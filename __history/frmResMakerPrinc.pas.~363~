unit frmResMakerPrinc;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, Buttons, ComCtrls, StdCtrls, Menus, ShellAPI, ExtCtrls,ShlObj;

type
  TfrmResmaker = class(TForm)
    popListaResources: TPopupMenu;
    menAdicionarArquivos: TMenuItem;
    menRemoverItens: TMenuItem;
    menLimparLista: TMenuItem;
    N1: TMenuItem;
    menCriarResource: TMenuItem;
    menCompilaRC: TMenuItem;
    savCriarResource: TSaveDialog;
    opnAdicionarArquivos: TOpenDialog;
    opnCompilarRC: TOpenDialog;
    gbxListaArquivos: TGroupBox;
    lvwListaResources: TListView;
    stbBarraStatus: TStatusBar;
    pnlBotoes: TPanel;
    btnCriarResource: TSpeedButton;
    btnAdicionarArquivo: TSpeedButton;
    btnRemoverArquivo: TSpeedButton;
    Panel1: TPanel;
    gbxEditarResource: TGroupBox;
    lblNomeResource: TLabel;
    lblTipoResource: TLabel;
    edtNomeResource: TEdit;
    edtTipoResource: TEdit;
    Panel2: TPanel;
    btnEditarResource: TSpeedButton;
    Timer1: TTimer;
    function ExtrairExeDoResource(TipoResouce, NomeResource, NomeSalvarRes: String): Boolean;
    procedure CriarArquivoRC;
    procedure CompilarRES(ArquivoRC: String);

    procedure btnCriarResourceClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure btnAdicionarArquivoClick(Sender: TObject);
    procedure lvwListaResourcesClick(Sender: TObject);
    procedure btnEditarResourceClick(Sender: TObject);
    procedure lvwListaResourcesEnter(Sender: TObject);
    procedure FormMouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer);
    procedure btnRemoverArquivoClick(Sender: TObject);
    procedure lvwListaResourcesKeyPress(Sender: TObject; var Key: Char);
    procedure menAdicionarArquivosClick(Sender: TObject);
    procedure menRemoverItensClick(Sender: TObject);
    procedure menLimparListaClick(Sender: TObject);
    procedure menCriarResourceClick(Sender: TObject);
    procedure menCompilaRCClick(Sender: TObject);
    procedure gbxListaArquivosMouseEnter(Sender: TObject);
    procedure lvwListaResourcesMouseEnter(Sender: TObject);
    procedure lvwListaResourcesChange(Sender: TObject; Item: TListItem;
      Change: TItemChange);
    procedure lvwListaResourcesKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure lvwListaResourcesColumnClick(Sender: TObject;
      Column: TListColumn);
    procedure lvwListaResourcesCompare(Sender: TObject; Item1, Item2: TListItem;
      Data: Integer; var Compare: Integer);
    procedure Timer1Timer(Sender: TObject);
    procedure FormShow(Sender: TObject);

  private
    { Private declarations }
    procedure ShowHint(Sender: TObject);

  public
    { Public declarations }
  end;

var
  frmResmaker: TfrmResmaker;
  SalvarEm, PathArquivoTempRC, PathCopiarRC, NomeSalvarRC, PathBrcc32: String;
  IndiceColunaLista : Integer = 0;
  OrdemAscendente: Boolean = True;

  WGiro : Integer;
  WMesage : String;

implementation

{$R *.dfm}
{$R BRCC32.RES}

type
  TChars = set of Char;


procedure TfrmResmaker.ShowHint(Sender: TObject);
begin
      stbBarraStatus.Panels[1].Text := GetLongHint(Application.Hint);
end;

procedure TfrmResmaker.Timer1Timer(Sender: TObject);
begin
 Form1.Caption := WMesage;
 Case WGiro of
  1: begin
  if Length(WMesage)<= 1 then
  begin
  WMesage := ' W';
  WGiro := (WGiro + 1);
  end;
  WMesage := Copy(WMesage, 2,250);
  end;

  2: begin
  if Length(WMesage)<= 2 then
  begin
  WMesage := ' I';
  WGiro := (WGiro + 1);
  end;
  WMesage := Copy(WMesage, 3,250);
  end;

  3: begin
  if Length(WMesage)<= 3 then
  begin
  WMesage := ' L ';
  WGiro := (WGiro + 1);
  end;
  WMesage := 'W' + Copy(WMesage, 4,250);
  end;

  4: begin
  if Length(WMesage)<= 4 then
  begin
  WGiro := (WGiro + 1);
  end;
  WMesage := 'WI' + Copy(WMesage, 5,250);
  end;

  5: begin
  if Length(WMesage)<= 5 then
  begin
  WGiro := 1;
  end;
  WMesage := 'WIL' + Copy(WMesage, 6,250);
  end;
 end;
end;

//PEGAR O PATCH DA AREA DE TRABALHO...
function PathAreaDeTrabalho: String;
var
   SFolder :  pItemIDList;
   PathDesktop: array[0..MAX_PATH] Of Char;
begin
     SHGetSpecialFolderLocation(Application.Handle, CSIDL_DESKTOPDIRECTORY, SFolder);
     SHGetPathFromIDList(SFolder, PathDesktop);
     Result := StrPas(PathDesktop);
end;

  //EVITAR LETRAS ACENTUADAS E NUMEROS NO NOME DO RESOURCE
function FiltrarCaracteres(const StrOriginal: string; const CaracteresValidos: TChars): string;
var
  i: integer;
begin
     Result := '';
     for i := 1 to Length(StrOriginal) do
         if StrOriginal[i] in CaracteresValidos then
            Result := Result + StrOriginal[i];
end;

/// executar MS-DOS e pegar a saida
function MsDosRemoto(Comando: string; DirDeExecucao: string): string;
var
   SA: TSecurityAttributes;
   SI: TStartupInfo;
   PI: TProcessInformation;
   StdOutPipeRead, StdOutPipeWrite: THandle;
   WasOK: Boolean;
   Buffer: array[0..255] of AnsiChar;
   BytesRead: Cardinal;
   WorkDir: string;
   Handle: Boolean;
begin
     Result := '';
     with SA do
     begin
          nLength := SizeOf(SA);
          bInheritHandle := True;
          lpSecurityDescriptor := nil;
     end;
     CreatePipe(StdOutPipeRead, StdOutPipeWrite, @SA, 0);
     try
        with SI do
        begin
             FillChar(SI, SizeOf(SI), 0);
             cb := SizeOf(SI);
             dwFlags := STARTF_USESHOWWINDOW or STARTF_USESTDHANDLES;
             wShowWindow := SW_HIDE;
             hStdInput := GetStdHandle(STD_INPUT_HANDLE); // don't redirect stdin
             hStdOutput := StdOutPipeWrite;
             hStdError := StdOutPipeWrite;
        end;
        WorkDir := DirDeExecucao;
        Handle := CreateProcess(nil, PChar('cmd.exe /C' + Comando), nil, nil,
                                True, 0, nil, PChar(WorkDir), SI, PI);
        CloseHandle(StdOutPipeWrite);
        if Handle then
        try
           repeat
           WasOK := ReadFile(StdOutPipeRead, Buffer, 255, BytesRead, nil);
           if BytesRead > 0 then
           begin
                Buffer[BytesRead] := #0;
                Result := Result + Buffer;
           end;
           until not WasOK or (BytesRead = 0);
                 WaitForSingleObject(PI.hProcess, INFINITE);
        finally
               CloseHandle(PI.hThread);
               CloseHandle(PI.hProcess);
        end;
     finally
            CloseHandle(StdOutPipeRead);
     end;
end;

//EXTRAIR O EXECUTÁVEL DO COMPILADOR DE DENTRO DO EXE
function TfrmResmaker.ExtrairExeDoResource(TipoResouce, NomeResource, NomeSalvarRes: string): Boolean;
var
   Resource: TResourceStream;
begin
     Result := False;
     Resource := TResourceStream.Create(Hinstance, NomeResource, PChar(TipoResouce));
     try
        Resource.SavetoFile(NomeSalvarRes);
        Result := True;
     finally
            Resource.Free;
     end;
end;
////

//////MOVER ARQUIVO OU PASTA
function Mover(Origem, Destino: String): Boolean;
var
  ShellInfo: TSHFileOpStruct;
begin
     Result := False;
     if DirectoryExists(Origem) or FileExists(Origem) then
     begin
          with ShellInfo do
          begin
               Wnd := 0;
               wFunc := FO_MOVE;
               pFrom := PChar(Origem + #0);
               pTo := PChar(Destino + #0);
               fFlags := FOF_NOERRORUI + FOF_NOCONFIRMATION + FOF_NOCONFIRMMKDIR +
                         FOF_NO_UI + FOF_RENAMEONCOLLISION;
          end;
          if SHFileOperation(ShellInfo) = 0 then
             Result := True;
     end;
end;

//Renomear arquivo ou pasta
function Renomear(Original, NovoNome: String): Boolean;
var
  ShellInfo: TSHFileOpStruct;
  Teste: Integer;
begin
     Result := False;
     if DirectoryExists(Original) or FileExists(Original) then
     begin
     with ShellInfo do
     begin
          Wnd := 0;
          wFunc := FO_RENAME;
          pFrom := PChar(Original + #0);
          pTo := PChar(NovoNome + #0);
          fFlags := FOF_NOERRORUI or FOF_NOCONFIRMATION or FOF_NO_UI;
     end;
    // Teste :=  SHFileOperation(ShellInfo);
     if SHFileOperation(ShellInfo) = 0 then
        Result := True
  end;
end;

procedure TfrmResmaker.FormCreate(Sender: TObject);
begin
     Panel1.FullRepaint := False;
     PathArquivoTempRC := ExtractFileDir(Application.ExeName)+'\TempRC.txt';
     Application.OnHint := ShowHint;
end;

procedure TfrmResmaker.FormMouseMove(Sender: TObject; Shift: TShiftState; X,
  Y: Integer);
begin
     if lvwListaResources.Selected = nil then
     begin
          btnRemoverArquivo.Enabled := False;
          exit
     end;
     btnRemoverArquivo.Enabled := True;
end;

procedure TfrmResmaker.FormShow(Sender: TObject);
begin
Timer1.Enabled := True;
 WMesage := ' ';
 WGiro := 1;
end;

procedure TfrmResmaker.gbxListaArquivosMouseEnter(Sender: TObject);
begin
     if lvwListaResources.Items.Count = 0 then
        gbxListaArquivos.Hint := 'Nenhum Arquivo|Lista de Arquivos - Vazia'
     else
         if lvwListaResources.Items.Count = 1 then
            gbxListaArquivos.Hint := 'Um Arquivo|Lista de Arquivos - Um Arquivo'
         else
              gbxListaArquivos.Hint :=  IntToStr(lvwListaResources.Items.Count) + ' Arquivos|Lista de Arquivos - '+ IntToStr(lvwListaResources.Items.Count) + ' Arquivos'
end;

procedure TfrmResmaker.lvwListaResourcesChange(Sender: TObject; Item: TListItem;
  Change: TItemChange);
begin
     if lvwListaResources.Items.Count < 1 then
        btnCriarResource.Enabled := False;
end;

procedure TfrmResmaker.lvwListaResourcesClick(Sender: TObject);
begin
     if lvwListaResources.Selected = nil then
     begin
          edtNomeResource.Text := '';
          edtTipoResource.Text := '';
          btnRemoverArquivo.Enabled := False;
          btnEditarResource.Enabled := False;
          edtNomeResource.ReadOnly := True;
          edtTipoResource.ReadOnly := True;
          exit;
     end;
     btnRemoverArquivo.Enabled := True;
     if lvwListaResources.SelCount = 1 then
     begin
          btnEditarResource.Enabled := True;
          edtNomeResource.Text := lvwListaResources.Selected.Caption;
          edtTipoResource.Text := lvwListaResources.Selected.SubItems[0];
          edtNomeResource.ReadOnly := False;
          edtTipoResource.ReadOnly := False;
     end
     else
     begin
          edtNomeResource.Text := '';
          edtTipoResource.Text := '';
          btnEditarResource.Enabled := False;
          edtNomeResource.ReadOnly := True;
          edtTipoResource.ReadOnly := True;
     end;
end;

procedure TfrmResmaker.lvwListaResourcesColumnClick(Sender: TObject;
  Column: TListColumn);
begin
     if Column.Index < 2 then
     begin
          // Se a coluna clicada eh a mesma que ja esta, inverte a ordem
          if IndiceColunaLista = Column.Index then
          begin
               OrdemAscendente := not(OrdemAscendente);
               lvwListaResources.AlphaSort;
          end
          // Se a coluna for diferente da clicada anteriormente
          else
          begin
               OrdemAscendente := True;
               IndiceColunaLista := Column.Index;
               lvwListaResources.AlphaSort;
          end;
     end;
end;

procedure TfrmResmaker.lvwListaResourcesCompare(Sender: TObject; Item1,
  Item2: TListItem; Data: Integer; var Compare: Integer);
begin
     // Para reorganizar o ListView de acordo com a coluna clicada
     if IndiceColunaLista = 0 then
     begin
          // Organização pelo caption do item de acordo com a ordem ascendente ou nÃ£o
          if OrdemAscendente then
             Compare := CompareText(Item1.Caption, Item2.Caption)
          else
              Compare:= CompareText(Item2.Caption, Item1.Caption);
     end
     else
     begin
          // Organização pelos subitems, tb de acordo com a ordem ascendente ou nÃ£o
          if OrdemAscendente then
             Compare:= CompareText(Item1.SubItems[IndiceColunaLista - 1], Item2.SubItems[IndiceColunaLista - 1])
          else
               Compare:= CompareText(Item2.SubItems[IndiceColunaLista - 1], Item1.SubItems[IndiceColunaLista - 1]);
     end;
end;

procedure TfrmResmaker.lvwListaResourcesEnter(Sender: TObject);
begin
     if lvwListaResources.Selected = nil then
     begin
          btnRemoverArquivo.Enabled := False;
          exit;
     end;
     btnRemoverArquivo.Enabled := True;
end;

procedure TfrmResmaker.lvwListaResourcesKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
     if Key = VK_DELETE then
     begin
          if lvwListaResources.Selected <> nil then
             btnRemoverArquivo.Click;
     end;
end;

procedure TfrmResmaker.lvwListaResourcesKeyPress(Sender: TObject;
  var Key: Char);
var
   CaracteresPermitidos: set of Char;
begin
     CaracteresPermitidos := ['A'..'Z', 'a'..'z', '_'];
     if lvwListaResources.Selected = nil then
        exit;
     if lvwListaResources.IsEditing then
     begin
          if Key in CaracteresPermitidos then
             Key := UpCase(Key)
          else
              Key := #0;
     end
end;

procedure TfrmResmaker.lvwListaResourcesMouseEnter(Sender: TObject);
begin
     lvwListaResources.Hint := gbxListaArquivos.Hint;
end;

procedure TfrmResmaker.menAdicionarArquivosClick(Sender: TObject);
begin
     btnAdicionarArquivo.Click;
end;

procedure TfrmResmaker.menCompilaRCClick(Sender: TObject);
var
   i: Integer;
begin
     if opnCompilarRC.Execute then
     begin
          SalvarEm := ExtractFileDir(opnCompilarRC.FileName)+'\';
          if not DirectoryExists(ExtractFileDir(SalvarEm)) then
             ForceDirectories(ExtractFileDir(SalvarEm));
          if ExtrairExeDoResource('EXEFILE', 'COMPILAR', SalvarEm+'brcc32.exe') then
             PathBrcc32 := SalvarEm+'brcc32.exe';
          NomeSalvarRC := opnCompilarRC.FileName;
          Sleep(100);
          CompilarRES(NomeSalvarRC);
     end;
end;

procedure TfrmResmaker.menCriarResourceClick(Sender: TObject);
begin
     btnCriarResource.Click;
end;

procedure TfrmResmaker.menLimparListaClick(Sender: TObject);
begin
     lvwListaResources.Clear;
end;

procedure TfrmResmaker.menRemoverItensClick(Sender: TObject);
begin
     btnRemoverArquivo.Click;
end;

///////////////////////    CRIAR ARQUIVO RC   //////////////////////////////////
procedure TfrmResmaker.CriarArquivoRC;
var
   LinhaTextoRC: String;
    ArquivoTempRC: TextFile;
   i: Integer;
begin
     NomeSalvarRC := savCriarResource.FileName;
     SalvarEm := ExtractFileDir(savCriarResource.FileName) + '\';
     if not DirectoryExists(ExtractFileDir(SalvarEm)) then
        ForceDirectories(ExtractFileDir(SalvarEm));
     if ExtrairExeDoResource('EXEFILE', 'COMPILAR', SalvarEm+'\brcc32.exe') then
        PathBrcc32 := SalvarEm+'brcc32.exe';
     //Criar arquivo RC
     AssignFile(ArquivoTempRC, PathArquivoTempRC);
     Rewrite(ArquivoTempRC) ;
     Sleep(100);
     if FileExists(PathArquivoTempRC) then
     begin
          for i := 0 to lvwListaResources.Items.Count - 1 do
          begin
               Writeln(ArquivoTempRC, lvwListaResources.Items[i].Caption + '   ' + lvwListaResources.Items[i].SubItems[0] + '   "' + lvwListaResources.Items[i].SubItems[1]+'"');
          end;
          CloseFile(ArquivoTempRC);
     end;
     Sleep(100);
     if not Renomear(PathArquivoTempRC, ExtractFileDir(PathArquivoTempRC)+'\'+ExtractFileName(NomeSalvarRC))then
     begin
          MessageDlg('Erro ao renomear arquivo .RC!!!', mtError, [mbOK], 0);
     end
     else
         PathCopiarRC := ExtractFileDir(PathArquivoTempRC)+'\'+ExtractFileName(NomeSalvarRC);
     if Mover(PathCopiarRC, SalvarEm) then
     begin
          NomeSalvarRC := ExtractFileDir(SalvarEm)+'\'+ExtractFileName(NomeSalvarRC);
     end
     else
         MessageDlg('Erro ao criar arquivo .RC!!!', mtError, [mbOK], 0);
end;

//////////////////////////   COMPILAR ARQUIVO RES  /////////////////////////////
procedure TfrmResmaker.CompilarRES(ArquivoRC: String);
var
   RetornoCompilacao, ComandoCompilação, PathBatchCompilar, ResCriado: String;
   BatchCompilar: TextFile;
   i: Integer;
begin
     ResCriado := ExtractFileDir(NomeSalvarRC) +'\'+ Copy(ExtractFileName(NomeSalvarRC), 0, Pos(ExtractFileExt(NomeSalvarRC), ExtractFileName(NomeSalvarRC))-1) +'.RES';
     ComandoCompilação := '""'+PathBrcc32+'" "'+NomeSalvarRC+'""';
     RetornoCompilacao := MsDosRemoto(ComandoCompilação, SalvarEm);
     Delete(RetornoCompilacao, 1, 111);
     if Pos(#13#10, RetornoCompilacao) <> 0  then
        Delete(RetornoCompilacao, Pos(#13#10, RetornoCompilacao), Pos(#13#10, RetornoCompilacao) + 4);
     if Pos('.RC', RetornoCompilacao) <> 0 then
        Delete(RetornoCompilacao, 1, Pos('.RC', RetornoCompilacao) + 3);
     Sleep(200);
     if not FileExists(ResCriado) then
     begin
          for i := 0 to 10 do
          begin
               Sleep(100);
          end;
          if FileExists(PathBrcc32) then
             DeleteFile(PathBrcc32);
          stbBarraStatus.Panels[0].Text := 'Erro ao criar resource!';
          MessageDlg('Ocorreu um erro ao criar resource!!!'+#13#13+'Código do erro: '+RetornoCompilacao, mtError, [mbOK], 0);
     end
     else
     begin
          if FileExists(PathBrcc32) then
             DeleteFile(PathBrcc32);
          SHChangeNotify(SHCNE_ASSOCCHANGED, SHCNF_IDLIST, nil, nil); //Atualizar área de trabalho
          stbBarraStatus.Panels[0].Text := 'Resource criado com sucesso!';
          MessageDlg('Resource criado com sucesso!!!', mtInformation, [mbOK], 0);
          lvwListaResources.Clear;
     end;
end;

procedure TfrmResmaker.btnAdicionarArquivoClick(Sender: TObject);
var
   i, j: Integer;
   ItemListaRes: TListItem;
   NomeRes, TipoRes, PathRes: String;
begin

     if opnAdicionarArquivos.Execute then
     begin
          for i := 0 to opnAdicionarArquivos.Files.Count - 1 do
          begin
               if LowerCase(ExtractFileExt(opnAdicionarArquivos.Files[i])) = '.lnk' then
                  opnAdicionarArquivos.Files[i] := '';

          end;
          for i := 0 to opnAdicionarArquivos.Files.Count - 1 do
          begin
               //Criar nome do Resource
               NomeRes := ExtractFileName(opnAdicionarArquivos.Files[i]);
               NomeRes := Copy(NomeRes, 0, Pos(ExtractFileExt(NomeRes), NomeRes) - 1);
               for j := 0 to Length(NomeRes) -1 do
               begin
                    //remover espaços e acentos e mudar para maiusulas
                    case NomeRes[j] of
                         ' ': NomeRes[j] := '_';
                         'á': NomeRes[j] := 'A';
                         'é': NomeRes[j] := 'E';
                         'í': NomeRes[j] := 'I';
                         'ó': NomeRes[j] := 'O';
                         'ú': NomeRes[j] := 'U';
                         'à': NomeRes[j] := 'A';
                         'è': NomeRes[j] := 'E';
                         'ì': NomeRes[j] := 'I';
                         'ò': NomeRes[j] := 'O';
                         'ù': NomeRes[j] := 'U';
                         'â': NomeRes[j] := 'A';
                         'ê': NomeRes[j] := 'E';
                         'î': NomeRes[j] := 'I';
                         'ô': NomeRes[j] := 'O';
                         'û': NomeRes[j] := 'U';
                         'ä': NomeRes[j] := 'A';
                         'ë': NomeRes[j] := 'E';
                         'ï': NomeRes[j] := 'I';
                         'ö': NomeRes[j] := 'O';
                         'ü': NomeRes[j] := 'U';
                         'ã': NomeRes[j] := 'A';
                         'õ': NomeRes[j] := 'O';
                         'ñ': NomeRes[j] := 'N';
                         'ç': NomeRes[j] := 'C';
                         'Á': NomeRes[j] := 'A';
                         'É': NomeRes[j] := 'E';
                         'Í': NomeRes[j] := 'I';
                         'Ó': NomeRes[j] := 'O';
                         'Ú': NomeRes[j] := 'U';
                         'À': NomeRes[j] := 'A';
                         'È': NomeRes[j] := 'E';
                         'Ì': NomeRes[j] := 'I';
                         'Ò': NomeRes[j] := 'O';
                         'Ù': NomeRes[j] := 'U';
                         'Â': NomeRes[j] := 'A';
                         'Ê': NomeRes[j] := 'E';
                         'Î': NomeRes[j] := 'I';
                         'Ô': NomeRes[j] := 'O';
                         'Û': NomeRes[j] := 'U';
                         'Ä': NomeRes[j] := 'A';
                         'Ë': NomeRes[j] := 'E';
                         'Ï': NomeRes[j] := 'I';
                         'Ö': NomeRes[j] := 'O';
                         'Ü': NomeRes[j] := 'U';
                         'Ã': NomeRes[j] := 'A';
                         'Õ': NomeRes[j] := 'O';
                         'Ñ': NomeRes[j] := 'N';
                         'Ç': NomeRes[j] := 'C';
                    end;
                    UpCase(NomeRes[i]);
               end;
               NomeRes := UpperCase(NomeRes);
               NomeRes := FiltrarCaracteres(NomeRes, ['A'..'Z', '_']);
               if Length(NomeRes) > 20 then
               begin
                    Delete(NomeRes, 20, Length(NomeRes));
               end;
               //Criar Tipo do Resource
               TipoRes := ExtractFileName(opnAdicionarArquivos.Files[i]);
               TipoRes := Copy(TipoRes, Pos(ExtractFileExt(TipoRes), TipoRes)+ 1, Length(TipoRes));
               TipoRes := UpperCase(TipoRes);
               if TipoRes = 'BMP' then
                  TipoRes := 'BITMAP';
               if TipoRes = 'ICO' then
                  TipoRes := 'ICON';
               //ADICIONAR NA LISTA...
               ItemListaRes := lvwListaResources.Items.Add;
               ItemListaRes.Caption := NomeRes;
               ItemListaRes.SubItems.Add(TipoRes);
               //Patch do Arquivo
               ItemListaRes.SubItems.Add(opnAdicionarArquivos.Files[i]);
          end;
          if lvwListaResources.Items.Count > 0 then
          begin
               btnCriarResource.Enabled := True;
          end;
     end;
end;

procedure TfrmResmaker.btnCriarResourceClick(Sender: TObject);
var
   i, NumArqRC: Integer;
begin
     savCriarResource.InitialDir := PathAreaDeTrabalho;
     NumArqRC := 1;
     if not FileExists(PathAreaDeTrabalho+'\Novo Resource.RC') then
        savCriarResource.FileName := 'Novo Resource'
     else
     begin
          repeat
                if FileExists(PathAreaDeTrabalho+'\Novo Resource ('+IntToStr(NumArqRC)+').RC') then
                   NumArqRC := NumArqRC + 1;
          until
               not FileExists(PathAreaDeTrabalho+'\Novo Resource ('+IntToStr(NumArqRC)+').RC');
          savCriarResource.FileName := 'Novo Resource ('+IntToStr(NumArqRC)+')';
     end;
     if savCriarResource.Execute then
     begin
          CriarArquivoRC;
          Sleep(300);
          for i := 0 to 10 do
          if not FileExists(NomeSalvarRC) then
             Sleep(100)
          else
          begin
               CompilarRES(NomeSalvarRC);
               exit;
          end;
     end;
end;

procedure TfrmResmaker.btnEditarResourceClick(Sender: TObject);
begin
     if lvwListaResources.Selected = nil then
        exit;
     lvwListaResources.Selected.Caption := edtNomeResource.Text;
     lvwListaResources.Selected.SubItems[0] := edtTipoResource.Text;
end;

procedure TfrmResmaker.btnRemoverArquivoClick(Sender: TObject);
begin
     if lvwListaResources.Selected <> nil then
        lvwListaResources.DeleteSelected ;
     if lvwListaResources.Items.Count < 1 then
     begin
          btnRemoverArquivo.Enabled := False;
          btnCriarResource.Enabled := False;
     end;
end;

end.
